{
  "version": 3,
  "sources": ["../../../../../../apps/kiosk-server/src/electron.ts"],
  "sourcesContent": ["import { app, BrowserWindow } from 'electron';\nimport './server';\n\n//const dev = process.env.NODE_ENV === 'development';\n\n// HTTP Server options:\n// - Feel free to change this to suit your needs.\nconst hostname = process.env.HOST || 'localhost';\nconst port = process.env.PORT ? parseInt(process.env.PORT) : 3000;\n\nfunction sleep(ms: number) {\n  return new Promise((resolve) => setTimeout(resolve, ms));\n}\n\n// Declare the BrowserWindow variable\nlet mainWindow: BrowserWindow | null;\n\nasync function createWindow() {\n  // Create the Electron window\n  mainWindow = new BrowserWindow({\n    width: 800,\n    height: 600,\n    webPreferences: {\n      nodeIntegration: true,\n      contextIsolation: false,\n    },\n  });\n\n  await sleep(1000);\n\n  // Point Electron to the Next.js app served at localhost:3000\n  mainWindow.loadURL(`http://${hostname}:${port}`);\n\n  mainWindow.on('closed', () => {\n    mainWindow = null;\n  });\n}\n\napp.on('ready', createWindow);\n\napp.on('window-all-closed', () => {\n  if (process.platform !== 'darwin') {\n    app.quit();\n  }\n});\n\napp.on('activate', () => {\n  if (BrowserWindow.getAllWindows().length === 0) {\n    createWindow();\n  }\n});\n"],
  "mappings": "AAAA,sBAAmC;AACnC,oBAAO;AAMP,MAAM,WAAW,QAAQ,IAAI,QAAQ;AACrC,MAAM,OAAO,QAAQ,IAAI,OAAO,SAAS,QAAQ,IAAI,IAAI,IAAI;AAE7D,SAAS,MAAM,IAAY;AACzB,SAAO,IAAI,QAAQ,CAAC,YAAY,WAAW,SAAS,EAAE,CAAC;AACzD;AAGA,IAAI;AAEJ,eAAe,eAAe;AAE5B,eAAa,IAAI,8BAAc;AAAA,IAC7B,OAAO;AAAA,IACP,QAAQ;AAAA,IACR,gBAAgB;AAAA,MACd,iBAAiB;AAAA,MACjB,kBAAkB;AAAA,IACpB;AAAA,EACF,CAAC;AAED,QAAM,MAAM,GAAI;AAGhB,aAAW,QAAQ,UAAU,QAAQ,IAAI,IAAI,EAAE;AAE/C,aAAW,GAAG,UAAU,MAAM;AAC5B,iBAAa;AAAA,EACf,CAAC;AACH;AAEA,oBAAI,GAAG,SAAS,YAAY;AAE5B,oBAAI,GAAG,qBAAqB,MAAM;AAChC,MAAI,QAAQ,aAAa,UAAU;AACjC,wBAAI,KAAK;AAAA,EACX;AACF,CAAC;AAED,oBAAI,GAAG,YAAY,MAAM;AACvB,MAAI,8BAAc,cAAc,EAAE,WAAW,GAAG;AAC9C,iBAAa;AAAA,EACf;AACF,CAAC;",
  "names": []
}
